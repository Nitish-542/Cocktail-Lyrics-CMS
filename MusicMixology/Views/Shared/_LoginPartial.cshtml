@* Import the ASP.NET Core Identity namespace to use identity-related components *@
@using Microsoft.AspNetCore.Identity

@* Inject the SignInManager to check if a user is signed in *@
@inject SignInManager<IdentityUser> SignInManager

@* Inject the UserManager to access user-related data *@
@inject UserManager<IdentityUser> UserManager

@* Navigation bar that displays different menu items based on the user's sign-in status *@
<ul class="navbar-nav">

    @* Check if the current user is signed in *@
    @if (SignInManager.IsSignedIn(User))
    {
        @* If signed in, show a greeting and a Logout button *@
        <li class="nav-item">
            @* Link to manage account profile *@
            <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">
                Hello @User.Identity?.Name!
            </a>
        </li>
        <li class="nav-item">
            @* Logout form that posts to the logout page and returns to the home page *@
            <form class="form-inline" asp-area="Identity" asp-page="/Account/Logout"
                  asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
                <button type="submit" class="nav-link btn btn-link text-dark">Logout</button>
            </form>
        </li>
    }
    else
    {
        @* If not signed in, show Register and Login links *@
        <li class="nav-item">
            <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Register">Register</a>
        </li>
        <li class="nav-item">
            <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Login">Login</a>
        </li>
    }
</ul>
